<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python学习笔记-绘图入门</title>
    <link href="/2021/01/21/python-study-3/"/>
    <url>/2021/01/21/python-study-3/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>本文只记录海龟绘图（turtle）的简要用法，完整文档请参考官方链接：</p><p><a href="https://docs.python.org/zh-cn/3/library/turtle.html">https://docs.python.org/zh-cn/3/library/turtle.html</a></p>          </div><h1 id="turtle-—-海龟绘图"><a href="#turtle-—-海龟绘图" class="headerlink" title="turtle — 海龟绘图"></a>turtle — 海龟绘图</h1><blockquote><p>海龟绘图很适合用来引导孩子学习编程。 最初来自于 Wally Feurzeig, Seymour Papert 和 Cynthia Solomon 于 1967 年所创造的 Logo 编程语言。</p><p>请想象绘图区有一只机器海龟，起始位置在 x-y 平面的 (0, 0) 点。先执行 <code>import turtle</code>，再执行 <code>turtle.forward(15)</code>，它将(在屏幕上)朝所面对的 x 轴正方向前进 15 像素，随着它的移动画出一条线段。再执行 <code>turtle.right(25)</code>，它将原地右转 25 度。</p><p>通过组合使用此类命令，可以轻松地绘制出精美的形状和图案。</p></blockquote><h2 id="turtle-库概述"><a href="#turtle-库概述" class="headerlink" title="turtle 库概述"></a>turtle 库概述</h2><ul><li>turtle绘图库是Python语言的标准库之一，随解释器直接安装到操作系统中，属于入门级的图形绘制函数库</li><li>绘图思想：想像一只海龟，初始在窗体正中心，可以控制它在画布上爬行，走过的轨迹就形成了绘制的图形。编程人员可以通过语句控制海龟改变方向、颜色、宽度等。</li><li>使用前需要通过import 导入 <code>import turtle</code></li></ul><h2 id="turtle的绘图窗体"><a href="#turtle的绘图窗体" class="headerlink" title="turtle的绘图窗体"></a>turtle的绘图窗体</h2><p>首次通过调用turtle绘图库的方法进行绘图时，会默认打开一个绘图窗体，缺省是居中占整个屏幕的一半。也可以通过<code>turtle.setup()</code>    进行窗体属性的设置。</p><p>用法： <code>turtle.setup(width,height,startx,starty)</code></p><p><img src="/images/image-20210121121417428.png" alt="画布相对屏幕位置"></p><h2 id="turtle空间坐标体系"><a href="#turtle空间坐标体系" class="headerlink" title="turtle空间坐标体系"></a>turtle空间坐标体系</h2><p>画布初始化后，海龟处于画布的中心点坐标（0，0）且面向坐标轴x轴正方向为当前方向。</p><center><img src="/images/image-20210121122845723.png" title="" width="380" hight="200"><img src="/images/image-20210121122930485.png" title="" width="380" hight="200"></center>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>程序设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown速查表</title>
    <link href="/2021/01/20/markdown%E9%80%9F%E6%9F%A5%E8%A1%A8/"/>
    <url>/2021/01/20/markdown%E9%80%9F%E6%9F%A5%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown-速查表"><a href="#Markdown-速查表" class="headerlink" title="Markdown 速查表"></a>Markdown 速查表</h1><p>Markdown 语法快速参考手册 / 速查表。</p><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>此 Markdown 速查表提供了所有 Markdown 语法元素的快速参考。但是此速查表无法涵盖所有极限用法，因此，如果您需要某些语法元素的详细信息，请参阅我们的 <a href="https://www.markdown.xyz/basic-syntax">基本语法</a> 和 <a href="https://www.markdown.xyz/extended-syntax">扩展语法</a> 手册。</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>这些是 John Gruber 的原始设计文档中列出的元素。所有 Markdown 应用程序都支持这些元素。</p><table><thead><tr><th>元素</th><th>Markdown 语法</th></tr></thead><tbody><tr><td><a href="https://www.markdown.xyz/basic-syntax/#headings">标题（Heading）</a></td><td># H1<br/>## H2<br/>### H3</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#bold">粗体（Bold）</a></td><td>**bold text**</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#italic">斜体（Italic）</a></td><td>*italicized text*</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#blockquotes-1">引用块（Blockquote）</a></td><td>&gt; blockquote</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#ordered-lists">有序列表（Ordered List）</a></td><td>1. First item<br/>2. Second item<br/>3. Third item</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#unordered-lists">无序列表（Unordered List）</a></td><td>- First item<br/>- Second item<br/>- Third item</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#code">代码（Code）</a></td><td>`code`</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#horizontal-rules">分隔线（Horizontal Rule）</a></td><td>---</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#links">链接（Link）</a></td><td>[title](<a href="https://www.example.com/">https://www.example.com\</a>)</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#images">图片（Image）</a></td><td>![alt text](image.jpg)</td></tr></tbody></table><h2 id="扩展语法"><a href="#扩展语法" class="headerlink" title="扩展语法"></a>扩展语法</h2><p>这些元素通过添加额外的功能扩展了基本语法。但是，并非所有 Markdown 应用程序都支持这些元素。</p><table><thead><tr><th>元素</th><th>Markdown 语法</th></tr></thead><tbody><tr><td><a href="https://www.markdown.xyz/extended-syntax/#tables">表格（Table）</a></td><td>| Syntax | Description |<br/>| ———– | ———– |<br/>| Header | Title |<br/>| Paragraph | Text |</td></tr><tr><td><a href="https://www.markdown.xyz/extended-syntax/#fenced-code-blocks">代码块（Fenced Code Block）</a></td><td>```<br/>{ <br/>“firstName”: “John”, <br/>“lastName”: “Smith”, <br/>“age”: 25<br/>}<br/>```</td></tr><tr><td><a href="https://www.markdown.xyz/extended-syntax/#footnotes">脚注（Footnote）</a></td><td>Here’s a sentence with a footnote. [^1]<br/>[^1]: This is the footnote.</td></tr><tr><td><a href="https://www.markdown.xyz/extended-syntax/#heading-ids">标题编号（Heading ID）</a></td><td>### My Great Heading { #custom-id }</td></tr><tr><td><a href="https://www.markdown.xyz/extended-syntax/#definition-lists">定义列表（Definition List）</a></td><td>term: <br/>efinition</td></tr><tr><td><a href="https://www.markdown.xyz/extended-syntax/#strikethrough">删除线（Strikethrough）</a></td><td>~~The world is flat.~~</td></tr><tr><td><a href="https://www.markdown.xyz/extended-syntax/#task-lists">任务列表（Task List）</a></td><td>- [x] Write the press release<br/>- [ ] Update the website<br/>- [ ] Contact the media</td></tr></tbody></table><h2 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h2><p><a href="https://www.markdown.xyz/cheat-sheet/">Markdown 速查表</a></p>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序设计</tag>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习笔记-入门语法简介</title>
    <link href="/2021/01/20/python-study-2/"/>
    <url>/2021/01/20/python-study-2/</url>
    
    <content type="html"><![CDATA[<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><blockquote><p>实例2: 设计一个温度转换程序，控制台接受用户输入以F或者f开头的华氏温度值（如：F250），并C或者c开头的摄氏温度形式（如：C100）将转换后的温度在控制台输出来，反之也然。    </p><p>转换公式为：摄氏温度 = （华氏温度 - 32）/ 1.8</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># TemperatureConversion.py</span><br>TString = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请按输入要求输入温度值：&quot;</span>)<br><span class="hljs-keyword">if</span> TString[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]:<br>    c = ( <span class="hljs-built_in">eval</span>(TString[<span class="hljs-number">1</span>:]) -<span class="hljs-number">32</span> ) / <span class="hljs-number">1.8</span><br>    print(<span class="hljs-string">&quot;转换后的温度是：C&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(c))<br><span class="hljs-keyword">elif</span> TString[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]:<br>    f = <span class="hljs-built_in">eval</span>(TString[<span class="hljs-number">1</span>:]) * <span class="hljs-number">1.8</span> + <span class="hljs-number">32</span><br>    print(<span class="hljs-string">&quot;转换后的温度是：F&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(f))<br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">&quot;请输入正确的温度格式！&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="Python语言程序格式框架"><a href="#Python语言程序格式框架" class="headerlink" title="Python语言程序格式框架"></a>Python语言程序格式框架</h1><h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h2><ul><li>Python对缩进的检查非常严格，中缩进是语法的一部分，缩进不正确会导致程序运行错误</li><li>缩进是表达代码间包含和层次关系的唯一手段</li><li>在同一程序内每一层缩进的长度需要保持一致，一般用4个空格或一个TAB制表符</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释是用来提高代码可读性的说明性文字，不被执行</p><ul><li><p>单行注释：以#开头，其后内容为注释</p><blockquote><p># TemperatureConversion.py </p></blockquote></li><li><p>多行注释：本质上Python没有多行注释，但以’’’开头和结尾的文本块由于不可被执行可用作注释使用。  </p><blockquote><p>‘’’<br/>c = ( eval(TString[1:]) -32 ) / 1.8<br/>print(“转换后的温度是：C{:.2f}”.format(c))<br>‘’’</p></blockquote></li></ul><h1 id="命名与保留字"><a href="#命名与保留字" class="headerlink" title="命名与保留字"></a>命名与保留字</h1><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><ul><li><p>命名规则：包括大小写字母、数字、下划线和中文等字符及其组合。</p><p>​    如：TString, c, 摄氏度</p></li><li><p>注意事项：大小写敏感、首字符不能是数字、不能是保留字</p><p>​    如： 91job, in , for 等是不合法的。temp 和 Temp是不同的变量</p></li></ul><h2 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h2><ul><li>Python有35个保留字（关键字）</li><li>大小写敏感。 in是保留字，IN 是变量</li></ul><table><thead><tr><th align="center">and</th><th align="center">elif</th><th align="center">import</th><th align="center">raise</th><th align="center">global</th></tr></thead><tbody><tr><td align="center">as</td><td align="center">else</td><td align="center">in</td><td align="center">return</td><td align="center">nonlocal</td></tr><tr><td align="center">assert</td><td align="center">except</td><td align="center">is</td><td align="center">try</td><td align="center">True</td></tr><tr><td align="center">break</td><td align="center">finally</td><td align="center">lambda</td><td align="center">while</td><td align="center">False</td></tr><tr><td align="center">class</td><td align="center">for</td><td align="center">not</td><td align="center">with</td><td align="center">None</td></tr><tr><td align="center">continue</td><td align="center">from</td><td align="center">or</td><td align="center">yield</td><td align="center">async</td></tr><tr><td align="center">def</td><td align="center">if</td><td align="center">Pass</td><td align="center">Del</td><td align="center">Await</td></tr></tbody></table><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>Python中数据类型包括：整数、浮点数、字符串、列表</p><ul><li><p>整数：数学中的整数，没有长短之分。如：58、-65535、545585454854445844578454584</p></li><li><p>浮点数：数学中的实数，带有小数部分，没有单精度和双精度之分。如：3.14、-3.14、10.00</p></li><li><p>字符串：由0个或者多个字符组成的有序字符序列。</p><ul><li><p>表示方法</p><ol><li><p>用一对单引号表示，如‘C’</p></li><li><p>用一对双引号表示，如”请输入正确的温度格式！”</p></li><li><p>用一对三个单引号表示，如：</p></li></ol><blockquote><p>  ‘’’<br>   这是一个字符块 ，<br>   也可以当成多行注释来用。<br>   ‘’’</p></blockquote></li><li><p>字符串的序号<br>字符串是字符的有序序列，可以通过序号对其中的字符进行索引。分为正向递增序号和反向递减序号。</p><pre><code>                     反向递减序号    &lt;-----------------------------------------</code></pre><table><thead><tr><th align="center">-12</th><th align="center">-11</th><th align="center">-10</th><th align="center">-9</th><th align="center">-8</th><th align="center">-7</th><th align="center">-6</th><th align="center">-5</th><th align="center">-4</th><th align="center">-3</th><th>-2</th><th align="center">-1</th></tr></thead><tbody><tr><td align="center">请</td><td align="center">按</td><td align="center">输</td><td align="center">入</td><td align="center">要</td><td align="center">求</td><td align="center">输</td><td align="center">入</td><td align="center">温</td><td align="center">度</td><td>值</td><td align="center">：</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td><td align="center">8</td><td align="center">9</td><td>10</td><td align="center">11</td></tr></tbody></table><pre><code>    ----------------------------------------&gt;                      正向递增序号</code></pre></li><li><p>字符串的使用</p><p>可以使用[ ]来获取字符串中一个或多个字符。主要包括“索引”和“切片”两种操作。</p><ol><li><p>索引：返回字符串中单个字符。格式： &lt;字符串&gt;[M]</p><p><code>&quot;请按输入要求输入温度值：&quot;[0]</code>      返回“请”字</p><p><code> TString[-1]</code>    返回字符串变量TString中最后一个字符   </p></li><li><p>切片：返回字符串中一段子字符串。格式：&lt;字符串&gt;[M: N ]</p><p><code>&quot;请按输入要求输入温度值：&quot;[2:4]</code>      返回“输入”二个字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">TString = <span class="hljs-string">&quot;F221&quot;</span><br>TString[<span class="hljs-number">1</span>:]<br></code></pre></td></tr></table></figure><p>返回字符串”221”，表示从第2个字符开始切，直到字符串末尾。</p></li></ol></li></ul></li><li><p>列表类型：由0个或多个数据组成的有序序列</p><ul><li><p>列表使用[ ]表示，采用逗号(,)分隔各元素</p><p>[‘F’,’f’]表示两个元素’F’和’f’</p></li><li><p>列表的访问一般使用保留字 in 来判断一个元素是否在列表中</p><p><code>TString[0] in [&#39;F&#39;,&#39;f&#39;]</code>    用于判断从TString中索引的字符是否与列表中的元素相同</p></li></ul></li></ul><h1 id="语句与函数"><a href="#语句与函数" class="headerlink" title="语句与函数"></a>语句与函数</h1><h2 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h2><p>赋值语句用来给变量赋予新的数据值</p><p><code> TString = input(&quot;请按输入要求输入温度值：&quot;)</code>    将用户的输入赋值给变量TString</p><p><code> f = eval(TString[1:]) * 1.8 + 32</code>    将运算结果赋值给变量f</p><p>​        其中：eval()函数是将字符串两边的引号去掉并执行余下语句。</p><h2 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h2><p>分支语句根据判断条件来决定程序运行方向</p><ul><li><p>分支语句的保留字有 if   elif   else</p></li><li><p>分支语句属于程序控制语句的一种，Python语法中，控制语句所在行必须以冒号（：）结尾，配合缩进来表示后续语句与条件的所属关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> TString[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]:<br>    c = ( <span class="hljs-built_in">eval</span>(TString[<span class="hljs-number">1</span>:]) -<span class="hljs-number">32</span> ) / <span class="hljs-number">1.8</span><br>    print(<span class="hljs-string">&quot;转换后的温度是：C&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(c))<br><span class="hljs-keyword">elif</span> TString[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]:<br>    f = <span class="hljs-built_in">eval</span>(TString[<span class="hljs-number">1</span>:]) * <span class="hljs-number">1.8</span> + <span class="hljs-number">32</span><br>    print(<span class="hljs-string">&quot;转换后的温度是：F&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(f))<br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">&quot;请输入正确的温度格式！&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2></li></ul><p>函数为实现某一特定功能的语句集合。类似数学中的函数y=f（x），根据输入的参数x的不同，产生不同的y值。</p><p><code> print(&quot;请输入正确的温度格式！&quot;)</code>    调用函数print()打印字符串“请输入正确的温度格式！”</p><p><code> eval(TString[1:])</code>    调用eval（）函数，其中TSting[1: ]是参数</p><h1 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h1><h2 id="输入函数"><a href="#输入函数" class="headerlink" title="输入函数"></a>输入函数</h2><ul><li><p>input()函数用于从控制台获得用记的输入</p></li><li><p>使用格式： &lt;变量&gt; = input(&lt;提示信息字符串&gt;)</p><p>用户输入的信息将以字符串的形式保存在&lt;变量&gt;中</p><p><code> TString = input(&quot;请按输入要求输入温度值：&quot;)</code>    将用户控制台输入的温度数据以字符串形式保存在变量TString中</p></li></ul><h2 id="输出函数"><a href="#输出函数" class="headerlink" title="输出函数"></a>输出函数</h2><ul><li><p>output()函数用于以字符形式向控制台输出结果</p></li><li><p>Python中的输出函数功能比较强大，可进行各种格式化输出操作</p><p><code>print(&quot;转换后的温度是：F&#123;:.2f&#125;&quot;.format(f))</code>    </p><p>{ }表示槽，后续变量会按0，1，2…的顺序分别向槽中按定义的格式进行格式化填充</p><p>{:.2f}表示将变量f取2位小数位后填充到这个槽</p><p>​        若f的值为211.23456，则格式化后的输出为<code>转换后的温度是：F211.23</code></p><p><strong>后续文章进行详细学习</strong></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>程序设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习笔记-Mac环境配置</title>
    <link href="/2021/01/19/python-study-1/"/>
    <url>/2021/01/19/python-study-1/</url>
    
    <content type="html"><![CDATA[<h1 id="Python开发环境配置"><a href="#Python开发环境配置" class="headerlink" title="Python开发环境配置"></a>Python开发环境配置</h1><h2 id="Python语言概述"><a href="#Python语言概述" class="headerlink" title="Python语言概述"></a>Python语言概述</h2><ul><li>Python  /ˈpaiθən/ ，译为“蟒蛇”</li><li>Python语言拥有者是Python Software Foundation（PSF）<ul><li>PSF是非盈利组织，致力于保护Python语言开放、开源和发展</li></ul></li><li>Python语言创立者：Guido van Rossum<ul><li>2002年，Python 2.x</li><li>2008年，Python 3.x</li></ul></li><li>Python语言是一种解释型语言，是一个有开放、开源精神的编程语言</li><li>Python语言可应用于火星探测、搜索引擎、引力波分析等众多领域，是一种超级语言</li></ul><h2 id="Python基本开发环境IDLE介绍"><a href="#Python基本开发环境IDLE介绍" class="headerlink" title="Python基本开发环境IDLE介绍"></a>Python基本开发环境IDLE介绍</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>官方提供，包括Python解释器和IDLE开发环境</li><li>轻量：大小只有几十MB，安装使用灵活，初学者推荐使用</li><li>功能丰富：编辑器+交互环境+标准库+库安装工具等等</li></ul><h3 id="安装过程（mac环境）"><a href="#安装过程（mac环境）" class="headerlink" title="安装过程（mac环境）"></a>安装过程（mac环境）</h3><p>​    Windows和Linux平台安装方法建议参考官方安装文档：<a href="https://docs.python.org/zh-cn/3.9/using/index.html">https://docs.python.org/zh-cn/3.9/using/index.html</a>  </p><p>​    Mac平台自带2.x版本，建议同时安装3.x版本学习，2.x版本已经不再更新，安装过程如下：</p><ul><li>进入官方主页：<a href="https://www.python.org/">https://www.python.org/</a> 下载最新版本，我选的3.9.1</li></ul><img src="/images/image-20210119211354215.png" alt="image-20210119211354215" style="zoom:77%;" /><ul><li>双击安装包进行安装，一路继续即可</li></ul><img src="/images/image-20210119211257130.png" alt="image-20210119211257130" style="zoom:87%;" /><ul><li><p>安装成功后在访达-应用程序下会创建Python 3.9文件夹，里面包含了IDLE开发环境以及帮助文档  </p><img src="/images/image-20210119212700271.png" alt="image-20210119212700271" style="zoom:90%;" /></li><li><p>设置PATH变量,我用的是zsh,使用vim打开.zshrc文件</p><p><code>vim ~/.zshrc</code></p><p>增加如下文本：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># Setting PATH for Python 3.9</span><br><span class="hljs-comment"># The original version is saved in .bash_profile.pysave</span><br><span class="hljs-attribute">PATH</span>=<span class="hljs-string">&quot;/Library/Frameworks/Python.framework/Versions/3.9/bin:<span class="hljs-variable">$&#123;PATH&#125;</span>&quot;</span><br><span class="hljs-builtin-name">export</span> PATH<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-string">&quot;/usr/local/opt/python@3.9/bin:<span class="hljs-variable">$PATH</span>&quot;</span><br>alias <span class="hljs-attribute">python</span>=<span class="hljs-string">&quot;/Library/Frameworks/Python.framework/Versions/3.9/bin/python3.9&quot;</span><br>alias <span class="hljs-attribute">pip</span>=<span class="hljs-string">&quot;/Library/Frameworks/Python.framework/Versions/3.9/bin/pip3.9&quot;</span><br></code></pre></td></tr></table></figure><p>重新载入shell程序</p><p><code>source ~/.zshrc</code></p><p>测试是否成功</p><p><code>python -V</code></p><blockquote><p>kikumail in ~ λ python -V<br>Python 3.9.1</p></blockquote></li></ul><h2 id="Python程序编写与运行"><a href="#Python程序编写与运行" class="headerlink" title="Python程序编写与运行"></a>Python程序编写与运行</h2><p>​    Python有二种编程方式</p><blockquote><p>实例1 求圆面积，设计一程序，在控制台输入一个半径值，输出圆的面积。  </p><p>圆面积计算公式：面积 = PI * 半径<sup>2</sup></p></blockquote><ul><li><strong>交互式</strong>    对每个输入语句即时运行出结果，适合语法练习使用。打开shell，输入python或者打开IDLE。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">kikumail <span class="hljs-keyword">in</span> ~/blog on master ● ● λ python<br>Python <span class="hljs-number">3.9</span><span class="hljs-number">.1</span> (v3<span class="hljs-number">.9</span><span class="hljs-number">.1</span>:1e5d33e9b9, Dec  <span class="hljs-number">7</span> <span class="hljs-number">2020</span>, <span class="hljs-number">12</span>:<span class="hljs-number">44</span>:01)<br>[Clang <span class="hljs-number">12.0</span><span class="hljs-number">.0</span> (clang-<span class="hljs-number">1200.0</span><span class="hljs-number">.32</span><span class="hljs-number">.27</span>)] on darwin<br>Type <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br><span class="hljs-meta">&gt;&gt;&gt; </span>r = <span class="hljs-number">30</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>circleArea = <span class="hljs-number">3.14</span> * r * r<br><span class="hljs-meta">&gt;&gt;&gt; </span>print(circleArea)<br><span class="hljs-number">2826.0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>print(<span class="hljs-string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(circleArea))<br><span class="hljs-number">2826.00</span><br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><ul><li><p><strong>文件式</strong>：批量执行一组语句并运行出结果，Python的主要编方式。打开IDLE，新建CircleArea.py文件。</p><p><img src="/images/image-20210119222012994.png" alt="image-20210119222012994"></p><p>打开shell，输入python CircleArea.py运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">kikumail <span class="hljs-keyword">in</span> ~/Documents/python on master ● λ python CircleArea.py<br>2826.0<br>2826.00<br>kikumail <span class="hljs-keyword">in</span> ~/Documents/python on master ● λ<br></code></pre></td></tr></table></figure></li></ul><h2 id="Python高级开发环境VSCode"><a href="#Python高级开发环境VSCode" class="headerlink" title="Python高级开发环境VSCode"></a>Python高级开发环境VSCode</h2><p>下载地址：<a href="http://code.visualstudio.com/">http://code.visualstudio.com</a>    直接下载安装即可</p><ul><li>功能完善，扩展模块多，非常推荐使用！</li></ul>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>程序设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你好，朋友</title>
    <link href="/2021/01/19/hello-world/"/>
    <url>/2021/01/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>欢迎光临！没了～</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
