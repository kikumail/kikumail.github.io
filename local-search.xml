<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python学习笔记-字符串类型</title>
    <link href="/2021/01/23/python-study-5-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/"/>
    <url>/2021/01/23/python-study-5-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h1><p>字符串：由0个或者多个字符组成的有序字符序列，在python中有多种表示方式。</p><h2 id="字符串表示与使用"><a href="#字符串表示与使用" class="headerlink" title="字符串表示与使用"></a>字符串表示与使用</h2><ul><li><p>字符串的表示</p><ol><li>用一对单引号表示，如‘C’</li><li>用一对双引号表示，如”请输入正确的温度格式！”</li><li>用一对三个单引号或三个双引号表示，如：<blockquote><p>  ‘’’<br>  这是一个字符块 ，<br>  也可以当成多行注释来用。<br>  ‘’’</p></blockquote></li></ol></li><li><p>字符串的序号<br>字符串是字符的有序序列，可以通过序号对其中的字符进行索引。分为正向递增序号和反向递减序号。</p></li></ul><pre><code>                       反向递减序号      &lt;-----------------------------------------</code></pre><table><thead><tr><th align="center">-12</th><th align="center">-11</th><th align="center">-10</th><th align="center">-9</th><th align="center">-8</th><th align="center">-7</th><th align="center">-6</th><th align="center">-5</th><th align="center">-4</th><th align="center">-3</th><th>-2</th><th align="center">-1</th></tr></thead><tbody><tr><td align="center">请</td><td align="center">按</td><td align="center">输</td><td align="center">入</td><td align="center">要</td><td align="center">求</td><td align="center">输</td><td align="center">入</td><td align="center">温</td><td align="center">度</td><td>值</td><td align="center">：</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td><td align="center">8</td><td align="center">9</td><td>10</td><td align="center">11</td></tr></tbody></table><pre><code>      ----------------------------------------&gt;                        正向递增序号</code></pre><ul><li><p>字符串的使用</p><p>可以使用[ ]来获取字符串中一个或多个字符。主要包括“<strong>索引</strong>”和“<strong>切片</strong>”两种操作。</p><ol><li><p><strong>索引</strong>：返回字符串中单个字符。格式：<code> &lt;字符串&gt;[index]</code>，其中index为索引编号</p><p><code>&quot;请按输入要求输入温度值：&quot;[0]</code>      返回“请”字</p><p><code> TString[-1]</code>    返回字符串变量TString中最后一个字符   </p></li><li><p><strong>切片</strong>：返回字符串中一段子字符串。 </p><ul><li><p>格式一：<code>&lt;字符串&gt;[start_index: stop_index ] </code></p><p>解释：返回&lt;字符串&gt;中索引从<code>start_index</code>至<code>stop_index-1</code>的子串。当省略start_index表示<code>从开头</code>，省略stop_index表示<code>至结尾</code></p><p>示例1：<code> &quot;请按输入要求输入温度值：&quot;[2:4]</code>    #结果返回“输入”</p><p>示例2： <code>&quot;请按输入要求输入温度值：&quot;[:3] </code>       #结果返回“请按输”</p><p>示例3： <code>&quot;请按输入要求输入温度值：&quot;[8:] </code>       #结果返回“温度值：”</p></li><li><p>格式二：<code>&lt;字符串&gt;[start_index: stop_index :step] </code></p><p>解释：以<code>步长step返回&lt;字符串&gt;中索引从start_index</code>至<code>stop_index-1</code>的子串。当省略start_index表示<code>从开头</code>，省略stop_index表示<code>至结尾</code>，当step为负数时表示反向切片。  </p><p>示例1：<code> &quot;零一二三四五六七八九十&quot;[2:8:2]</code>    #结果返回“二四六”</p><p>示例2： <code>&quot;零一二三四五六七八九十&quot;[::-1] </code>       #结果返回“十九八七六五四三二一零”</p><p>示例2： <code>&quot;零一二三四五六七八九十&quot;[6:-8:-2] </code>    #结果返回“六四”</p></li></ul></li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>程序设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习笔记-数字类型</title>
    <link href="/2021/01/22/python-study-4-%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B/"/>
    <url>/2021/01/22/python-study-4-%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="数字类型-Numbers"><a href="#数字类型-Numbers" class="headerlink" title="数字类型(Numbers)"></a>数字类型(Numbers)</h2><h3 id="整数类型-int"><a href="#整数类型-int" class="headerlink" title="整数类型 (int)"></a>整数类型 (int)</h3><p>​    整数类型和数学中的整数概念基本一致，可以取正数和负数，且取值无长度限制。根据进制表示形式分为以下四种。</p><ul><li>十进制：9527、1389998989、-1314</li><li>二进制（以0b或者0B开头）：0b00101010、-0B100</li><li>八进制（以0o或者0O开头）：0o256、-0O34231</li><li>十六进制（以0x或者0X开头）：0x3F、-0X259</li></ul><h3 id="浮点类型-float"><a href="#浮点类型-float" class="headerlink" title="浮点类型(float)"></a>浮点类型(float)</h3><p>​    浮点类型相当数学中的实数，是带有小数点及小数的数字 ，其值可取正数和负数，取值范围数量级为-10^307^到10^308^,精度数量级10^16^。<br>​    浮点数间的运行存在不确定的尾数，这是因为浮点数以二进制形式表示时的有穷性导致的，这并不是python的BUG。故日常编程时尽量不要直接将两个浮点数进行大小比较，或者做精确的计算。如果实在要用可结合<code>round()</code>函数使用，或者使用decimal模块。<br><img src="/images/image-20210122204102852.png" alt="浮点运算存在不确定尾数"><img src="/images/image-20210122204403400.png" alt="使用round()函数进行浮点运行"></p><ul><li><code>round(x,d)</code> : 对x四舍五入，d是小数位保留位数</li><li>因为不确定尾数一般发生在10^16^ 左右，所以使用round()函数对浮点计算结果四舍五入很有效</li><li>浮点数类型可以采用<code>科学计数法</code>表示<br>格式：<code>&lt;a&gt;e&lt;b&gt;或者&lt;a&gt;E&lt;b&gt;</code>  表示 a*10^b^<br>例如：0.0000123 表示为1.23e5，3.5E8 的值为350000000.0</li></ul><h3 id="布尔类型-bool"><a href="#布尔类型-bool" class="headerlink" title="布尔类型(bool)"></a>布尔类型(bool)</h3><p>Python语言中的布尔类型有两种：True （真）和 False（假） ，首字母要大写。</p><ul><li><p>真值测试</p><p>在Python中所有的对象都可以进行真值测试，以下为判断为假的情况</p><blockquote><ul><li>None</li><li>False</li><li>数值中的零，包括0，0.0，0j（虚数）</li><li>空序列，包括空字符串(”)，空元组(())，空列表([])</li><li>空的字典{}</li><li>自定义的对象的实例，该对象的_bool_方法返回False或者_len_方法返回0</li></ul></blockquote></li></ul><p>​        除了以上的情况外，所有的对象在if或者while语句中的表现都为真</p><ul><li><p>逻辑运算</p><p>在Python中有三种逻辑运算符（<code>and、or、not</code>）分别对应<code>与、或、非</code>三种操作。<code>注意：</code>Python中<strong>没有</strong> <code>&amp;&amp;</code>,<code>||</code>,<code>!</code>等在c或java语言中表示逻辑运算的符号。</p><ul><li>and(与)：两个操作数都为True，返回True，否则返回False</li><li>or(或)：两个操作数只要有一个为False，返回False，否则返回True</li><li>not(非)：单操作数运算符，操作数为True，返回False，操作数为False，返回True</li></ul></li><li><p>短路运算</p><p>布尔类型还可以与其它数据类型（这些数据类型代表的真假参考以上真值测试说明）进行逻辑运算。当参与运算的是其它数据类型，则返回的是其它数据类型本身的值 ，而不是其代表的真或假。</p><ul><li>计算 <code>a and b</code>时，若a为True，则计算结果取决于b，返回的是b本身的值；若a为False，则直接返回a本身的值。</li></ul><table><thead><tr><th align="center">a值为True</th><th align="center">a值”hello”,代表True</th><th align="center">a值为False</th><th align="center">a值为””,代表False</th></tr></thead><tbody><tr><td align="center"><img src="/images/image-20210123143643181.png" alt="返回b本身的值"></td><td align="center"><img src="/images/image-20210123143759694.png" alt="返回b本身的值"></td><td align="center"><img src="/images/image-20210123143917004.png" alt="返回a的值"></td><td align="center"><img src="/images/image-20210123144200460.png" alt="返回a本身值，空字符串“”"></td></tr></tbody></table><ul><li>计算<code>a or b</code> 时，若a为True，则返回a的值；相反，返回b的值</li></ul><table><thead><tr><th align="center">a值为True</th><th align="center">a值”hello”,代表True</th><th align="center">a值为False</th><th align="center">b值为0,代表False</th></tr></thead><tbody><tr><td align="center"><img src="/images/image-20210123151744720.png" alt="返回a本身的值"></td><td align="center"><img src="/images/image-20210123151808259.png" alt="返回a本身的值"></td><td align="center"><img src="/images/image-20210123151851903.png" alt="返回b本身的值"></td><td align="center"><img src="/images/image-20210123151908368.png" alt="返回b本身的值"></td></tr></tbody></table></li><li><p>三目运算</p><p>Python中利用if else条件语句实现了三目运算。</p><p>格式 ：<code>表达式1  if  条件表达式  else  表达式2</code>    </p><p>如果条件表达式成立返回表达式1的结果，否则返回表达式2的结果</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">10</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b = <span class="hljs-number">20</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>print(a <span class="hljs-keyword">if</span> a&gt;b <span class="hljs-keyword">else</span> b)<br><span class="hljs-number">20</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><br></code></pre></td></tr></table></figure></li><li><p>比较运算</p><p>通过比较操作会返回布尔类型的值。除了普通的比较操作外，Python还支持is操作来判断两个对象是否是同一个对象，下面是Python支持的所有的比较操作：</p><table><thead><tr><th align="left">操作符</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">&lt;</td><td align="left">小于</td></tr><tr><td align="left">&lt;=</td><td align="left">小于等于</td></tr><tr><td align="left">&gt;</td><td align="left">大于</td></tr><tr><td align="left">&gt;=</td><td align="left">大于等于</td></tr><tr><td align="left">==</td><td align="left">等于</td></tr><tr><td align="left">!=</td><td align="left">不等于</td></tr><tr><td align="left">is</td><td align="left">是相同对象</td></tr><tr><td align="left">is not</td><td align="left">是不同对象</td></tr></tbody></table><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-number">10</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b = <span class="hljs-number">20</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>print(a ==b)<br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>print(a &lt; b)<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>print(a != b)<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>print(a <span class="hljs-keyword">is</span> b)<br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><br></code></pre></td></tr></table></figure><h3 id="复数类型-complex"><a href="#复数类型-complex" class="headerlink" title="复数类型(complex)"></a>复数类型(complex)</h3></li><li><p>复数的概念 </p></li></ul><blockquote><p>我们把形如z=a+bi（a,b均为实数）的数称为复数，其中a称为<a href="https://baike.baidu.com/item/%E5%AE%9E%E9%83%A8/53626919">实部</a>，b称为虚部，i称为<a href="https://baike.baidu.com/item/%E8%99%9A%E6%95%B0">虚数</a>单位。当z的虚部等于零时，常称z为实数；当z的<a href="https://baike.baidu.com/item/%E8%99%9A%E9%83%A8/5231815">虚部</a>不等于零时，实部等于零时，常称z为<a href="https://baike.baidu.com/item/%E7%BA%AF%E8%99%9A%E6%95%B0/3386848">纯虚数</a>。复数域是实数域的代数闭包，即任何复系数多项式在复数域中总有根。 复数是由<a href="https://baike.baidu.com/item/%E6%84%8F%E5%A4%A7%E5%88%A9/148336">意大利</a>米兰学者卡当在十六世纪首次引入，经过达朗贝尔、<a href="https://baike.baidu.com/item/%E6%A3%A3%E8%8E%AB%E5%BC%97/2763026">棣莫弗</a>、欧拉、高斯等人的工作，此概念逐渐为数学家所接受。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="https://baike.baidu.com/item/%E5%A4%8D%E6%95%B0/254365">[1]</span></a></sup></p></blockquote><ul><li><p>Python中有关复数的定义</p><blockquote><ol><li>虚数不能单独存在，它们总是和一个值为0.0的实数部分一起构成一个复数</li><li>复数由<code>实数</code>部分和<code>虚数</code>部分构成</li><li>表示复数的语法：<code>real+imagej</code></li><li>实数部分和虚数部分都是<code>浮点数</code></li><li>虚数部分必须有后缀<code>j</code>或<code>J</code></li></ol></blockquote><p>复数可以用使用函数 <code>complex(real, imag)</code> 或者是带有后缀j的浮点数来指定。比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-built_in">complex</span>(<span class="hljs-number">5</span>, <span class="hljs-number">8</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>b = <span class="hljs-number">4</span> - <span class="hljs-number">7j</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>print(a)<br>(<span class="hljs-number">5</span>+<span class="hljs-number">8j</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>print(b)<br>(<span class="hljs-number">4</span>-<span class="hljs-number">7j</span>)<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure></li><li><p>复数的操作和常见的数学运算</p><p>获取复数的实部、虚部和共轭复数的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a.real<br><span class="hljs-number">5.0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.imag<br><span class="hljs-number">8.0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>a.conjugate()<br>(<span class="hljs-number">5</span>-<span class="hljs-number">8j</span>)<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><p>常见的数学运算示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-built_in">complex</span>(<span class="hljs-number">5</span>,<span class="hljs-number">8</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>b = <span class="hljs-number">4</span>-<span class="hljs-number">7j</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>print(a + b)<br>(<span class="hljs-number">9</span>+<span class="hljs-number">1j</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>print(a * b)<br>(<span class="hljs-number">76</span>-<span class="hljs-number">3j</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>print(a / b)<br>(-<span class="hljs-number">0.553846153846154</span>+<span class="hljs-number">1.0307692307692309j</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">abs</span>(a)<br><span class="hljs-number">9.433981132056603</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><br></code></pre></td></tr></table></figure><p>若要执行复杂的复数函数如正弦、余弦或平方根，则需要引入 <code>cmath</code> 模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a = <span class="hljs-built_in">complex</span>(<span class="hljs-number">5</span>,<span class="hljs-number">8</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>b = <span class="hljs-number">4</span>-<span class="hljs-number">7j</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> cmath<br><span class="hljs-meta">&gt;&gt;&gt; </span>cmath.sin(a)<br>(-<span class="hljs-number">1429.2566486042679</span>+<span class="hljs-number">422.79248111012714j</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>cmath.cos(b)<br>(-<span class="hljs-number">358.4039322400533</span>-<span class="hljs-number">414.96701031076253j</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>cmath.exp(a)<br>(-<span class="hljs-number">21.594119667068036</span>+<span class="hljs-number">146.83378286556217j</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><br></code></pre></td></tr></table></figure></li></ul><h3 id="数值运算操作符"><a href="#数值运算操作符" class="headerlink" title="数值运算操作符"></a>数值运算操作符</h3><p>​    操作符是完成运算的一种符号体系，Python中数值运算操作符定义如下表：</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加 - 两个对象相加</td><td align="left">a + b 输出结果 30</td></tr><tr><td align="left">-</td><td align="left">减 - 得到负数或是一个数减去另一个数</td><td align="left">a - b 输出结果 -10</td></tr><tr><td align="left">*</td><td align="left">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td align="left">a * b 输出结果 200</td></tr><tr><td align="left">/</td><td align="left">除 - x除以y</td><td align="left">b / a 输出结果 2</td></tr><tr><td align="left">%</td><td align="left">取模 - 返回除法的余数</td><td align="left">b % a 输出结果 0</td></tr><tr><td align="left">**</td><td align="left">幂 - 返回x的y次幂</td><td align="left">a**b 为10的20次方， 输出结果 100000000000000000000</td></tr><tr><td align="left">//</td><td align="left">取整除 - 返回商的整数部分（<strong>向下取整</strong>）</td><td align="left"><code>&gt;&gt;&gt; 9//2 4 &gt;&gt;&gt; -9//2 5</code></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">+=</td><td align="left">加法赋值运算符</td><td align="left">c += a 等效于 c = c + a</td></tr><tr><td align="left">-=</td><td align="left">减法赋值运算符</td><td align="left">c -= a 等效于 c = c - a</td></tr><tr><td align="left">*=</td><td align="left">乘法赋值运算符</td><td align="left">c *= a 等效于 c = c * a</td></tr><tr><td align="left">/=</td><td align="left">除法赋值运算符</td><td align="left">c /= a 等效于 c = c / a</td></tr><tr><td align="left">%=</td><td align="left">取模赋值运算符</td><td align="left">c %= a 等效于 c = c % a</td></tr><tr><td align="left">**=</td><td align="left">幂赋值运算符</td><td align="left">c **= a 等效于 c = c** a</td></tr><tr><td align="left">//=</td><td align="left">取整除赋值运算符</td><td align="left">c //= a 等效于 c = c // a</td></tr></tbody></table><p>注：数字类型间可进行混合运算，生成结果为“最宽”类型 ，整数-&gt;浮点数-&gt;复数</p><p>​    例如：<code> 256 + 4.0 =260.0</code>    （整数 + 浮点数 = 浮点数）</p><h3 id="常用数值运算函数"><a href="#常用数值运算函数" class="headerlink" title="常用数值运算函数"></a>常用数值运算函数</h3><p>Python标准库提供了一些常用的数值运算函数，列表如下：</p><table><thead><tr><th><strong>函数及使用</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>abs(x)</td><td>绝对值，x的绝对值<br/>abs(-10.01) 结果为 10.01</td></tr><tr><td>divmod(x,y)</td><td>商余，(x/ / y, x%y)，同时输出商和余数<br/>divmod(10, 3) 结果为 (3, 1)</td></tr><tr><td>pow(x, y[, z])</td><td>幂余，(x**y)%z，[..]表示参数z可省略<br/>pow(3, pow(3, 99), 10000) 结果为 4587</td></tr><tr><td>round(x[, d])</td><td>四舍五入，d是保留小数位数，默认值为0<br/>round(-10.123, 2) 结果为 -10.12</td></tr><tr><td>max(x1,x2,…,xn)</td><td>最大值，返回x1,x2, … ,xn中的最大值，n不限<br/>max(1, 9, 5, 4, 3) 结果为 9</td></tr><tr><td>min(x1,x2,…,xn)</td><td>最小值，返回x1,x2, … ,xn中的最小值，n不限<br/>min(1, 9, 5, 4, 3) 结果为 1</td></tr><tr><td>int(x)</td><td>将x变成整数，舍弃小数部分<br />int(123.45) 结果为123； int(“123”) 结果为123</td></tr><tr><td>float (x)</td><td>将x变成浮点数，增加小数部分<br />float (12) 结果为12.0； float (“1.23”) 结果为1.23</td></tr><tr><td>complex(x)</td><td>将x变成复数，增加虚数部分<br />complex(4) 结果为 4 + 0j</td></tr></tbody></table><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://baike.baidu.com/item/%E5%A4%8D%E6%95%B0/254365">https://baike.baidu.com/item/%E5%A4%8D%E6%95%B0/254365</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>程序设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jekyll快速入门之安装</title>
    <link href="/2021/01/21/jekyll%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B9%8B%E5%AE%89%E8%A3%85/"/>
    <url>/2021/01/21/jekyll%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%B9%8B%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="Jekyll介绍"><a href="#Jekyll介绍" class="headerlink" title="Jekyll介绍"></a>Jekyll介绍</h1><p>一种快速生成静态博客网站的应用框架。</p><h2 id="mac-环境下Jekyll安装"><a href="#mac-环境下Jekyll安装" class="headerlink" title="mac 环境下Jekyll安装"></a>mac 环境下Jekyll安装</h2><p>​    我的mac版本为macOS big sur 11.1，建议利用rbenv统一管理ruby版本。</p><h3 id="安装rbenv"><a href="#安装rbenv" class="headerlink" title="安装rbenv"></a>安装rbenv</h3><ul><li><p>执行：</p><p><code>kikumail:~/ $ brew install rbenv ruby-build</code></p></li><li><p>配置<code>.zshrc</code>并重启shell</p><p><code>kikumail:~/ $ echo &#39;if which rbenv &gt; /dev/null; then eval &quot;$(rbenv init -)&quot;; fi&#39; &gt;&gt; ~/.zshrc</code></p><p><code>kikumail:~/ $ source ./zshrc</code></p></li></ul><h3 id="安装ruby"><a href="#安装ruby" class="headerlink" title="安装ruby"></a>安装ruby</h3><ul><li><p>执行：</p><p><code> kikumail:~/ $ rbenv install 3.0.0</code></p><p>  <code>kikumail:~/ $ rbenv global 3.0.0</code></p></li><li><p>重启shell</p><p><code>kikumail:~/ $ source ./zshrc</code></p></li><li><p>查看ruby版本</p><p><code>kikumail:~/ $ ruby -v</code></p><blockquote><p>kikumail:~/ $ ruby -v                                                        [21:08:26]<br>ruby 3.0.0p0 (2020-12-25 revision 95aff21468) [x86_64-darwin20]</p></blockquote></li></ul><h3 id="安装Jekyll-这里强烈不建议以sudo权限安装，会出现目录权限问题而不能执行jekyll命令"><a href="#安装Jekyll-这里强烈不建议以sudo权限安装，会出现目录权限问题而不能执行jekyll命令" class="headerlink" title="安装Jekyll(这里强烈不建议以sudo权限安装，会出现目录权限问题而不能执行jekyll命令)"></a>安装Jekyll(这里强烈不建议以sudo权限安装，会出现目录权限问题而不能执行jekyll命令)</h3><ul><li><p>执行安装：</p><p><code>kikumail:~/ $ gem install bundler jekyll</code></p></li><li><p>新建名为myblog博客站点</p><p><code> kikumail:~/ $ jekyll new myblog</code></p></li><li><p>启动本地服务器</p><p><code> kikumail:~/ $ cd myblog</code></p><p><code>kikumail:~/ $ bundle exec jekyll serve</code></p><p>如果出现：</p><blockquote><p>bundler: failed to load command: jekyll (/Users/kikumail/myblog/vendor/bundle/ruby/3.0.0/bin/jekyll)</p><p>/Users/kikumail/myblog/vendor/bundle/ruby/3.0.0/gems/jekyll-4.2.0/lib/jekyll/commands/serve/servlet.rb:3:in `require’: cannot load such file – webrick (LoadError)</p></blockquote><p>说明缺少webrick依赖</p><p>执行：  </p><p><code> kikumail:~/ $ bundle add webrick</code></p><p>安装后，重新启动即可。</p></li><li><p>访问</p><p>浏览器输入：<a href="http://127.0.0.1:4000/">http://127.0.0.1:4000/</a></p><p><img src="/images/image-20210122114631992.png" alt="image-20210122114631992"></p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://jekyllrb.com/docs/installation/macos/">https://jekyllrb.com/docs/installation/macos/</a></p>]]></content>
    
    
    <categories>
      
      <category>Jekyll</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jekyll</tag>
      
      <tag>博客搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习笔记-海龟(turtle)绘图入门</title>
    <link href="/2021/01/21/python-study-3-%E6%B5%B7%E9%BE%9F(turtle)%E7%BB%98%E5%9B%BE%E5%85%A5%E9%97%A8/"/>
    <url>/2021/01/21/python-study-3-%E6%B5%B7%E9%BE%9F(turtle)%E7%BB%98%E5%9B%BE%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>本文只记录海龟绘图（turtle）的简要用法，完整文档请参考官方链接：</p><p><a href="https://docs.python.org/zh-cn/3/library/turtle.html">https://docs.python.org/zh-cn/3/library/turtle.html</a></p>          </div><h1 id="turtle-—-海龟绘图"><a href="#turtle-—-海龟绘图" class="headerlink" title="turtle — 海龟绘图"></a>turtle — 海龟绘图</h1><blockquote><p>海龟绘图很适合用来引导孩子学习编程。 最初来自于 Wally Feurzeig, Seymour Papert 和 Cynthia Solomon 于 1967 年所创造的 Logo 编程语言。</p><p>请想象绘图区有一只机器海龟，起始位置在 x-y 平面的 (0, 0) 点。先执行 <code>import turtle</code>，再执行 <code>turtle.forward(15)</code>，它将(在屏幕上)朝所面对的 x 轴正方向前进 15 像素，随着它的移动画出一条线段。再执行 <code>turtle.right(25)</code>，它将原地右转 25 度。</p><p>通过组合使用此类命令，可以轻松地绘制出精美的形状和图案。</p></blockquote><h2 id="turtle-库概述"><a href="#turtle-库概述" class="headerlink" title="turtle 库概述"></a>turtle 库概述</h2><ul><li>turtle绘图库是Python语言的标准库之一，随解释器直接安装到操作系统中，属于入门级的图形绘制函数库</li><li>绘图思想：想像一只海龟，初始在窗体正中心，可以控制它在画布上爬行，走过的轨迹就形成了绘制的图形。编程人员可以通过语句控制海龟改变方向、颜色、宽度等。</li><li>使用前需要通过import 导入 <code>import turtle</code></li></ul><h2 id="turtle的绘图窗体"><a href="#turtle的绘图窗体" class="headerlink" title="turtle的绘图窗体"></a>turtle的绘图窗体</h2><p>首次通过调用turtle绘图库的方法进行绘图时，会默认打开一个绘图窗体，缺省是居中占整个屏幕的一半。也可以通过<code>turtle.setup()</code>    进行窗体属性的设置。</p><p>用法： <code>turtle.setup(width,height,startx,starty)</code></p><p><img src="/images/image-20210121121417428.png" alt="窗体相对屏幕位置"></p><h2 id="turtle空间坐标体系"><a href="#turtle空间坐标体系" class="headerlink" title="turtle空间坐标体系"></a>turtle空间坐标体系</h2><p>画布初始化后，海龟处于画布的中心点坐标（0，0）且面向坐标轴x轴正方向为当前方向。</p><ul><li>以坐标轴为参考时，可以控制海龟以绝对坐标在画布上运动。</li></ul><center><img src="/images/image-20210121122845723.png" title="" width="380" hight="200"><img src="/images/image-20210121122930485.png" title="" width="380" hight="200"></center><ul><li>以海龟自身为参考时，可以控制海龟往前、后、左、右进行方向运动。</li></ul><center>  <img src ="/images/image-20210121133437046.png" title="" width="380" hight="200"><img src="/images/image-20210121133512314.png" title="" width="380" hight="200"></center><h2 id="turtle角度坐标体系"><a href="#turtle角度坐标体系" class="headerlink" title="turtle角度坐标体系"></a>turtle角度坐标体系</h2><p>在进行turtle绘图时，还可以通过对海龟面向的角度进行控制，进而改变海龟的行进路线。</p><ul><li>以坐标轴为参考时，可以控制海龟以绝对角度进行变向，一般通过<code>turtle.seth(绝对角度值)</code>方法来设定。</li></ul><p><img src="/images/image-20210121135138521.png" alt="控制绝对角度"></p><ul><li><p>以海龟自身为参考时，可以通过控制海龟按目前面向方向为参考的左转或者右转相对角度值来改变行进方向，一般通过<code>turtle.left(相对角度)</code>和<code>turtle.right(相对角度)</code>方法来设定。</p><p><img src="/images/image-20210121135717987.png" alt="控制相对角度"></p></li></ul><h2 id="常用绘图命令"><a href="#常用绘图命令" class="headerlink" title="常用绘图命令"></a>常用绘图命令</h2><h3 id="画笔设置"><a href="#画笔设置" class="headerlink" title="画笔设置"></a>画笔设置</h3><p>画笔有颜色、画线的宽度等属性：</p><ul><li><code>turtle.pensize()</code>：设置画笔的宽度；</li><li><code>turtle.pencolor()</code>：没有参数传入返回当前画笔颜色。传入参数设置画笔颜色，可以是字符串如”red”、”blue”，也可以是RGB 3元组。</li><li><code>turtle.speed()</code>：设置画笔移动速度，画笔绘制的速度范围[0,10]整数，数字越大越快。</li></ul><h3 id="绘图命令"><a href="#绘图命令" class="headerlink" title="绘图命令"></a>绘图命令</h3><p>操纵海龟绘图有多种命令，这些命令可以分为三种，分别是：画笔运动命令、画笔控制命令和全局控制命令。</p><h5 id="画笔运动命令"><a href="#画笔运动命令" class="headerlink" title="画笔运动命令"></a>画笔运动命令</h5><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>turtle.forward(distance)</td><td>向当前画笔方向移动distance像素长</td></tr><tr><td>turtle.backward(distance)</td><td>向当前画笔相反方向移动distance像素长度</td></tr><tr><td>turtle.right(degree)</td><td>顺时针移动degree°</td></tr><tr><td>turtle.left(degree)</td><td>逆时针移动degree°</td></tr><tr><td>turtle.pendown()</td><td>移动时绘制图形,缺省时也为绘制</td></tr><tr><td>turtle.goto(x,y)</td><td>将画笔移动到坐标为x，y的位置</td></tr><tr><td>turtle.penup()</td><td>移动时不绘制图形,提起笔，用于另起一个地方绘制时用</td></tr><tr><td>turtle.speed(speed)</td><td>画笔绘制的速度范围[0,10]整数</td></tr><tr><td>turtle.circle()</td><td>画圆,半径为正(负),表示圆心在画笔的左边(右边)画圆</td></tr></tbody></table><h5 id="画笔控制命令"><a href="#画笔控制命令" class="headerlink" title="画笔控制命令"></a>画笔控制命令</h5><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>turtle.pensize(width)</td><td>绘制图形时的宽度</td></tr><tr><td>turtle.pencolor()</td><td>画笔颜色</td></tr><tr><td>turtle.fillcolor(colorstring)</td><td>绘制图形的填充颜色</td></tr><tr><td>turtle.color(color1, color2)</td><td>同时设置pencolor=color1, fillcolor=color2</td></tr><tr><td>turtle.filling()</td><td>返回当前是否在填充状态</td></tr><tr><td>turtle.begin_fill()</td><td>准备开始填充图形</td></tr><tr><td>turtle.end_fill()</td><td>填充完成</td></tr><tr><td>turtle.hideturtle()</td><td>隐藏箭头显示；</td></tr><tr><td>turtle.showturtle()</td><td>与hideturtle()函数对应</td></tr></tbody></table><h5 id="全局控制命令"><a href="#全局控制命令" class="headerlink" title="全局控制命令"></a>全局控制命令</h5><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>turtle.clear()</td><td>清空turtle窗口，但是turtle的位置和状态不会改变</td></tr><tr><td>turtle.reset()</td><td>清空窗口，重置turtle状态为起始状态</td></tr><tr><td>turtle.undo()</td><td>撤销上一个turtle动作</td></tr><tr><td>turtle.isvisible()</td><td>返回当前turtle是否可见</td></tr><tr><td>stamp()</td><td>复制当前图形</td></tr><tr><td>turtle.write(s[,font=(“font-name”,font_size,”font_type”)])</td><td>写文本，s为文本内容，font是字体的参数，里面分别为字体名称，大小和类型；font为可选项, font的参数也是可选项</td></tr></tbody></table><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p><strong>绘制一个五角星</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> turtle <span class="hljs-keyword">as</span> t          <span class="hljs-comment"># 导入 turtle 库 别名 t</span><br>t.setup(<span class="hljs-number">600</span>, <span class="hljs-number">500</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>)<span class="hljs-comment"># 设置窗口宽600，高500，起始位置在屏幕200，200坐标处</span><br>t.pensize(<span class="hljs-number">3</span>)<span class="hljs-comment"># 设置画笔粗细为3</span><br>t.pencolor(<span class="hljs-string">&quot;pink&quot;</span>)<span class="hljs-comment"># 设置画笔颜色为pink</span><br>t.fillcolor(<span class="hljs-string">&quot;red&quot;</span>)<span class="hljs-comment"># 设置填充色为red</span><br>t.penup()<span class="hljs-comment"># 抬起画笔</span><br>t.goto(-<span class="hljs-number">150</span>,<span class="hljs-number">80</span>)<span class="hljs-comment"># 移动画笔到窗口绝对坐标（-150，80）处</span><br>t.pendown()<span class="hljs-comment"># 落下画笔</span><br>t.begin_fill()<span class="hljs-comment"># 开始填充</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<span class="hljs-comment"># 循环5次（i从0-4）</span><br>    t.forward(<span class="hljs-number">300</span>)<span class="hljs-comment"># 向前行进300像素</span><br>    t.right(<span class="hljs-number">144</span>)<span class="hljs-comment"># 以海龟行前方向为参考，右转144度</span><br>t.end_fill()<span class="hljs-comment"># 循环结束，停止填充</span><br>t.done()<span class="hljs-comment"># 让窗口进入消息循环，等待被关闭</span><br></code></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><img src="/images/image-20210121142516720.png" alt="五角星绘制实例"></p><h3 id="附：一个非常好看的樱花树的绘制"><a href="#附：一个非常好看的樱花树的绘制" class="headerlink" title="附：一个非常好看的樱花树的绘制"></a>附：一个非常好看的樱花树的绘制</h3><p>链接：<a href="https://blog.csdn.net/z564359805/article/details/85861481#commentBox">https://blog.csdn.net/z564359805/article/details/85861481#commentBox</a></p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="http://blog.itpub.net/69908432/viewspace-2659461/">http://blog.itpub.net/69908432/viewspace-2659461/</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>程序设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown速查表</title>
    <link href="/2021/01/20/markdown%E9%80%9F%E6%9F%A5%E8%A1%A8/"/>
    <url>/2021/01/20/markdown%E9%80%9F%E6%9F%A5%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown-速查表"><a href="#Markdown-速查表" class="headerlink" title="Markdown 速查表"></a>Markdown 速查表</h1><p>Markdown 语法快速参考手册 / 速查表。</p><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>此 Markdown 速查表提供了所有 Markdown 语法元素的快速参考。但是此速查表无法涵盖所有极限用法，因此，如果您需要某些语法元素的详细信息，请参阅官网 <a href="https://www.markdown.xyz/basic-syntax">基本语法</a> 和 <a href="https://www.markdown.xyz/extended-syntax">扩展语法</a> 手册。</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>这些是 John Gruber 的原始设计文档中列出的元素。所有 Markdown 应用程序都支持这些元素。</p><table><thead><tr><th>元素</th><th>Markdown 语法</th></tr></thead><tbody><tr><td><a href="https://www.markdown.xyz/basic-syntax/#headings">标题（Heading）</a></td><td># H1<br/>## H2<br/>### H3</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#bold">粗体（Bold）</a></td><td>**bold text**</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#italic">斜体（Italic）</a></td><td>*italicized text*</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#blockquotes-1">引用块（Blockquote）</a></td><td>&gt; blockquote</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#ordered-lists">有序列表（Ordered List）</a></td><td>1. First item<br/>2. Second item<br/>3. Third item</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#unordered-lists">无序列表（Unordered List）</a></td><td>- First item<br/>- Second item<br/>- Third item</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#code">代码（Code）</a></td><td>`code`</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#horizontal-rules">分隔线（Horizontal Rule）</a></td><td>---</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#links">链接（Link）</a></td><td>[title](<a href="https://www.example.com/">https://www.example.com\</a>)</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#images">图片（Image）</a></td><td>![alt text](image.jpg)</td></tr></tbody></table><h2 id="扩展语法"><a href="#扩展语法" class="headerlink" title="扩展语法"></a>扩展语法</h2><p>这些元素通过添加额外的功能扩展了基本语法。但是，并非所有 Markdown 应用程序都支持这些元素。</p><table><thead><tr><th>元素</th><th>Markdown 语法</th></tr></thead><tbody><tr><td><a href="https://www.markdown.xyz/extended-syntax/#tables">表格（Table）</a></td><td>| Syntax | Description |<br/>| ———– | ———– |<br/>| Header | Title |<br/>| Paragraph | Text |</td></tr><tr><td><a href="https://www.markdown.xyz/extended-syntax/#fenced-code-blocks">代码块（Fenced Code Block）</a></td><td>```<br/>{ <br/>“firstName”: “John”, <br/>“lastName”: “Smith”, <br/>“age”: 25<br/>}<br/>```</td></tr><tr><td><a href="https://www.markdown.xyz/extended-syntax/#footnotes">脚注（Footnote）</a></td><td>Here’s a sentence with a footnote. [^1]<br/>[^1]: This is the footnote.</td></tr><tr><td><a href="https://www.markdown.xyz/extended-syntax/#heading-ids">标题编号（Heading ID）</a></td><td>### My Great Heading { #custom-id }</td></tr><tr><td><a href="https://www.markdown.xyz/extended-syntax/#definition-lists">定义列表（Definition List）</a></td><td>term: <br/>efinition</td></tr><tr><td><a href="https://www.markdown.xyz/extended-syntax/#strikethrough">删除线（Strikethrough）</a></td><td>~~The world is flat.~~</td></tr><tr><td><a href="https://www.markdown.xyz/extended-syntax/#task-lists">任务列表（Task List）</a></td><td>- [x] Write the press release<br/>- [ ] Update the website<br/>- [ ] Contact the media</td></tr></tbody></table><h2 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h2><p><a href="https://www.markdown.xyz/cheat-sheet/">Markdown 速查表</a></p>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序设计</tag>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习笔记-入门语法简介</title>
    <link href="/2021/01/20/python-study-2-%E5%85%A5%E9%97%A8%E8%AF%AD%E6%B3%95%E7%AE%80%E4%BB%8B/"/>
    <url>/2021/01/20/python-study-2-%E5%85%A5%E9%97%A8%E8%AF%AD%E6%B3%95%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><blockquote><p>实例2: 设计一个温度转换程序，控制台接受用户输入以F或者f开头的华氏温度值（如：F250），并C或者c开头的摄氏温度形式（如：C100）将转换后的温度在控制台输出来，反之也然。    </p><p>转换公式为：摄氏温度 = （华氏温度 - 32）/ 1.8</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># TemperatureConversion.py</span><br>TString = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请按输入要求输入温度值：&quot;</span>)<br><span class="hljs-keyword">if</span> TString[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]:<br>    c = ( <span class="hljs-built_in">eval</span>(TString[<span class="hljs-number">1</span>:]) -<span class="hljs-number">32</span> ) / <span class="hljs-number">1.8</span><br>    print(<span class="hljs-string">&quot;转换后的温度是：C&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(c))<br><span class="hljs-keyword">elif</span> TString[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]:<br>    f = <span class="hljs-built_in">eval</span>(TString[<span class="hljs-number">1</span>:]) * <span class="hljs-number">1.8</span> + <span class="hljs-number">32</span><br>    print(<span class="hljs-string">&quot;转换后的温度是：F&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(f))<br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">&quot;请输入正确的温度格式！&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="Python语言程序格式框架"><a href="#Python语言程序格式框架" class="headerlink" title="Python语言程序格式框架"></a>Python语言程序格式框架</h1><h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h2><ul><li>Python对缩进的检查非常严格，中缩进是语法的一部分，缩进不正确会导致程序运行错误</li><li>缩进是表达代码间包含和层次关系的唯一手段</li><li>在同一程序内每一层缩进的长度需要保持一致，一般用4个空格或一个TAB制表符</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>注释是用来提高代码可读性的说明性文字，不被执行</p><ul><li><p>单行注释：以#开头，其后内容为注释</p><blockquote><p># TemperatureConversion.py </p></blockquote></li><li><p>多行注释：本质上Python没有多行注释，但以’’’开头和结尾的文本块由于不可被执行可用作注释使用。  </p><blockquote><p>‘’’<br/>c = ( eval(TString[1:]) -32 ) / 1.8<br/>print(“转换后的温度是：C{:.2f}”.format(c))<br>‘’’</p></blockquote></li></ul><h1 id="命名与保留字"><a href="#命名与保留字" class="headerlink" title="命名与保留字"></a>命名与保留字</h1><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><ul><li><p>命名规则：包括大小写字母、数字、下划线和中文等字符及其组合。</p><p>​    如：TString, c, 摄氏度</p></li><li><p>注意事项：大小写敏感、首字符不能是数字、不能是保留字</p><p>​    如： 91job, in , for 等是不合法的。temp 和 Temp是不同的变量</p></li></ul><h2 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h2><ul><li>Python有35个保留字（关键字）</li><li>大小写敏感。 in是保留字，IN 是变量</li></ul><table><thead><tr><th align="center">and</th><th align="center">elif</th><th align="center">import</th><th align="center">raise</th><th align="center">global</th></tr></thead><tbody><tr><td align="center">as</td><td align="center">else</td><td align="center">in</td><td align="center">return</td><td align="center">nonlocal</td></tr><tr><td align="center">assert</td><td align="center">except</td><td align="center">is</td><td align="center">try</td><td align="center">True</td></tr><tr><td align="center">break</td><td align="center">finally</td><td align="center">lambda</td><td align="center">while</td><td align="center">False</td></tr><tr><td align="center">class</td><td align="center">for</td><td align="center">not</td><td align="center">with</td><td align="center">None</td></tr><tr><td align="center">continue</td><td align="center">from</td><td align="center">or</td><td align="center">yield</td><td align="center">async</td></tr><tr><td align="center">def</td><td align="center">if</td><td align="center">Pass</td><td align="center">Del</td><td align="center">Await</td></tr></tbody></table><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>Python中数据类型包括：整数、浮点数、字符串、列表</p><ul><li><p>整数：数学中的整数，没有长短之分。如：58、-65535、545585454854445844578454584</p></li><li><p>浮点数：数学中的实数，带有小数部分，没有单精度和双精度之分。如：3.14、-3.14、10.00</p></li><li><p>字符串：由0个或者多个字符组成的有序字符序列，在python中有多种表示方式。如：””,’’,”你好”，’hello python’,’’’ 我爱python ‘’’,””” 人生苦短，我学python “””</p></li><li><p>列表类型：由0个或多个数据组成的有序序列</p><ul><li><p>列表使用[ ]表示，采用逗号(,)分隔各元素</p><p>[‘F’,’f’]表示两个元素’F’和’f’</p></li><li><p>列表的访问一般使用保留字 in 来判断一个元素是否在列表中</p><p><code>TString[0] in [&#39;F&#39;,&#39;f&#39;]</code>    用于判断从TString中索引的字符是否与列表中的元素相同</p></li></ul></li></ul><h1 id="语句与函数"><a href="#语句与函数" class="headerlink" title="语句与函数"></a>语句与函数</h1><h2 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h2><p>赋值语句用来给变量赋予新的数据值</p><p><code> TString = input(&quot;请按输入要求输入温度值：&quot;)</code>    将用户的输入赋值给变量TString</p><p><code> f = eval(TString[1:]) * 1.8 + 32</code>    将运算结果赋值给变量f</p><p>​        其中：eval()函数是将字符串两边的引号去掉并执行余下语句。</p><h2 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h2><p>分支语句根据判断条件来决定程序运行方向</p><ul><li><p>分支语句的保留字有 if   elif   else</p></li><li><p>分支语句属于程序控制语句的一种，Python语法中，控制语句所在行必须以冒号（：）结尾，配合缩进来表示后续语句与条件的所属关系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> TString[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]:<br>    c = ( <span class="hljs-built_in">eval</span>(TString[<span class="hljs-number">1</span>:]) -<span class="hljs-number">32</span> ) / <span class="hljs-number">1.8</span><br>    print(<span class="hljs-string">&quot;转换后的温度是：C&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(c))<br><span class="hljs-keyword">elif</span> TString[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]:<br>    f = <span class="hljs-built_in">eval</span>(TString[<span class="hljs-number">1</span>:]) * <span class="hljs-number">1.8</span> + <span class="hljs-number">32</span><br>    print(<span class="hljs-string">&quot;转换后的温度是：F&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(f))<br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">&quot;请输入正确的温度格式！&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2></li></ul><p>函数为实现某一特定功能的语句集合。类似数学中的函数y=f（x），根据输入的参数x的不同，产生不同的y值。</p><p><code> print(&quot;请输入正确的温度格式！&quot;)</code>    调用函数print()打印字符串“请输入正确的温度格式！”</p><p><code> eval(TString[1:])</code>    调用eval（）函数，其中TSting[1: ]是参数</p><h1 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h1><h2 id="输入函数"><a href="#输入函数" class="headerlink" title="输入函数"></a>输入函数</h2><ul><li><p>input()函数用于从控制台获得用记的输入</p></li><li><p>使用格式： &lt;变量&gt; = input(&lt;提示信息字符串&gt;)</p><p>用户输入的信息将以字符串的形式保存在&lt;变量&gt;中</p><p><code> TString = input(&quot;请按输入要求输入温度值：&quot;)</code>    将用户控制台输入的温度数据以字符串形式保存在变量TString中</p></li></ul><h2 id="输出函数"><a href="#输出函数" class="headerlink" title="输出函数"></a>输出函数</h2><ul><li><p>output()函数用于以字符形式向控制台输出结果</p></li><li><p>Python中的输出函数功能比较强大，可进行各种格式化输出操作</p><p><code>print(&quot;转换后的温度是：F&#123;:.2f&#125;&quot;.format(f))</code>    </p><p>{ }表示槽，后续变量会按0，1，2…的顺序分别向槽中按定义的格式进行格式化填充</p><p>{:.2f}表示将变量f取2位小数位后填充到这个槽</p><p>​        若f的值为211.23456，则格式化后的输出为<code>转换后的温度是：F211.23</code></p><p><strong>后续文章进行详细学习</strong></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>程序设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习笔记-Mac环境配置</title>
    <link href="/2021/01/19/python-study-1-Mac%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/01/19/python-study-1-Mac%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Python开发环境配置"><a href="#Python开发环境配置" class="headerlink" title="Python开发环境配置"></a>Python开发环境配置</h1><h2 id="Python语言概述"><a href="#Python语言概述" class="headerlink" title="Python语言概述"></a>Python语言概述</h2><ul><li>Python  /ˈpaiθən/ ，译为“蟒蛇”</li><li>Python语言拥有者是Python Software Foundation（PSF）<ul><li>PSF是非盈利组织，致力于保护Python语言开放、开源和发展</li></ul></li><li>Python语言创立者：Guido van Rossum<ul><li>2002年，Python 2.x</li><li>2008年，Python 3.x</li></ul></li><li>Python语言是一种解释型语言，是一个有开放、开源精神的编程语言</li><li>Python语言可应用于火星探测、搜索引擎、引力波分析等众多领域，是一种超级语言</li></ul><h2 id="Python基本开发环境IDLE介绍"><a href="#Python基本开发环境IDLE介绍" class="headerlink" title="Python基本开发环境IDLE介绍"></a>Python基本开发环境IDLE介绍</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>官方提供，包括Python解释器和IDLE开发环境</li><li>轻量：大小只有几十MB，安装使用灵活，初学者推荐使用</li><li>功能丰富：编辑器+交互环境+标准库+库安装工具等等</li></ul><h3 id="安装过程（mac环境）"><a href="#安装过程（mac环境）" class="headerlink" title="安装过程（mac环境）"></a>安装过程（mac环境）</h3><p>​    Windows和Linux平台安装方法建议参考官方安装文档：<a href="https://docs.python.org/zh-cn/3.9/using/index.html">https://docs.python.org/zh-cn/3.9/using/index.html</a>  </p><p>​    Mac平台自带2.x版本，建议同时安装3.x版本学习，2.x版本已经不再更新，安装过程如下：</p><ul><li>进入官方主页：<a href="https://www.python.org/">https://www.python.org/</a> 下载最新版本，我选的3.9.1</li></ul><img src="/images/image-20210119211354215.png" alt="image-20210119211354215" style="zoom:77%;" /><ul><li>双击安装包进行安装，一路继续即可</li></ul><img src="/images/image-20210119211257130.png" alt="image-20210119211257130" style="zoom:87%;" /><ul><li><p>安装成功后在访达-应用程序下会创建Python 3.9文件夹，里面包含了IDLE开发环境以及帮助文档  </p><img src="/images/image-20210119212700271.png" alt="image-20210119212700271" style="zoom:90%;" /></li><li><p>设置PATH变量,我用的是zsh,使用vim打开.zshrc文件</p><p><code>vim ~/.zshrc</code></p><p>增加如下文本：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># Setting PATH for Python 3.9</span><br><span class="hljs-comment"># The original version is saved in .bash_profile.pysave</span><br><span class="hljs-attribute">PATH</span>=<span class="hljs-string">&quot;/Library/Frameworks/Python.framework/Versions/3.9/bin:<span class="hljs-variable">$&#123;PATH&#125;</span>&quot;</span><br><span class="hljs-builtin-name">export</span> PATH<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-string">&quot;/usr/local/opt/python@3.9/bin:<span class="hljs-variable">$PATH</span>&quot;</span><br>alias <span class="hljs-attribute">python</span>=<span class="hljs-string">&quot;/Library/Frameworks/Python.framework/Versions/3.9/bin/python3.9&quot;</span><br>alias <span class="hljs-attribute">pip</span>=<span class="hljs-string">&quot;/Library/Frameworks/Python.framework/Versions/3.9/bin/pip3.9&quot;</span><br></code></pre></td></tr></table></figure><p>重新载入shell程序</p><p><code>source ~/.zshrc</code></p><p>测试是否成功</p><p><code>python -V</code></p><blockquote><p>kikumail in ~ λ python -V<br>Python 3.9.1</p></blockquote></li></ul><h2 id="Python程序编写与运行"><a href="#Python程序编写与运行" class="headerlink" title="Python程序编写与运行"></a>Python程序编写与运行</h2><p>​    Python有二种编程方式</p><blockquote><p>实例1 求圆面积，设计一程序，在控制台输入一个半径值，输出圆的面积。  </p><p>圆面积计算公式：面积 = PI * 半径<sup>2</sup></p></blockquote><ul><li><strong>交互式</strong>    对每个输入语句即时运行出结果，适合语法练习使用。打开shell，输入python或者打开IDLE。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">kikumail <span class="hljs-keyword">in</span> ~/blog on master ● ● λ python<br>Python <span class="hljs-number">3.9</span><span class="hljs-number">.1</span> (v3<span class="hljs-number">.9</span><span class="hljs-number">.1</span>:1e5d33e9b9, Dec  <span class="hljs-number">7</span> <span class="hljs-number">2020</span>, <span class="hljs-number">12</span>:<span class="hljs-number">44</span>:01)<br>[Clang <span class="hljs-number">12.0</span><span class="hljs-number">.0</span> (clang-<span class="hljs-number">1200.0</span><span class="hljs-number">.32</span><span class="hljs-number">.27</span>)] on darwin<br>Type <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br><span class="hljs-meta">&gt;&gt;&gt; </span>r = <span class="hljs-number">30</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>circleArea = <span class="hljs-number">3.14</span> * r * r<br><span class="hljs-meta">&gt;&gt;&gt; </span>print(circleArea)<br><span class="hljs-number">2826.0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>print(<span class="hljs-string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(circleArea))<br><span class="hljs-number">2826.00</span><br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><ul><li><p><strong>文件式</strong>：批量执行一组语句并运行出结果，Python的主要编方式。打开IDLE，新建CircleArea.py文件。</p><p><img src="/images/image-20210119222012994.png" alt="image-20210119222012994"></p><p>打开shell，输入python CircleArea.py运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">kikumail <span class="hljs-keyword">in</span> ~/Documents/python on master ● λ python CircleArea.py<br>2826.0<br>2826.00<br>kikumail <span class="hljs-keyword">in</span> ~/Documents/python on master ● λ<br></code></pre></td></tr></table></figure></li></ul><h2 id="Python高级开发环境VSCode"><a href="#Python高级开发环境VSCode" class="headerlink" title="Python高级开发环境VSCode"></a>Python高级开发环境VSCode</h2><p>下载地址：<a href="http://code.visualstudio.com/">http://code.visualstudio.com</a>    直接下载安装即可</p><ul><li>功能完善，扩展模块多，强烈推荐使用！</li></ul>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>程序设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你好，朋友</title>
    <link href="/2021/01/19/hello-world/"/>
    <url>/2021/01/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>欢迎光临！没了～</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
