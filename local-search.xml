<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python学习笔记-海龟(turtle)绘图入门</title>
    <link href="/2021/01/21/python-study-3/"/>
    <url>/2021/01/21/python-study-3/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>本文只记录海龟绘图（turtle）的简要用法，完整文档请参考官方链接：</p><p><a href="https://docs.python.org/zh-cn/3/library/turtle.html">https://docs.python.org/zh-cn/3/library/turtle.html</a></p>          </div><h1 id="turtle-—-海龟绘图"><a href="#turtle-—-海龟绘图" class="headerlink" title="turtle — 海龟绘图"></a>turtle — 海龟绘图</h1><blockquote><p>海龟绘图很适合用来引导孩子学习编程。 最初来自于 Wally Feurzeig, Seymour Papert 和 Cynthia Solomon 于 1967 年所创造的 Logo 编程语言。</p><p>请想象绘图区有一只机器海龟，起始位置在 x-y 平面的 (0, 0) 点。先执行 <code>import turtle</code>，再执行 <code>turtle.forward(15)</code>，它将(在屏幕上)朝所面对的 x 轴正方向前进 15 像素，随着它的移动画出一条线段。再执行 <code>turtle.right(25)</code>，它将原地右转 25 度。</p><p>通过组合使用此类命令，可以轻松地绘制出精美的形状和图案。</p></blockquote><h2 id="turtle-库概述"><a href="#turtle-库概述" class="headerlink" title="turtle 库概述"></a>turtle 库概述</h2><ul><li>turtle绘图库是Python语言的标准库之一，随解释器直接安装到操作系统中，属于入门级的图形绘制函数库</li><li>绘图思想：想像一只海龟，初始在窗体正中心，可以控制它在画布上爬行，走过的轨迹就形成了绘制的图形。编程人员可以通过语句控制海龟改变方向、颜色、宽度等。</li><li>使用前需要通过import 导入 <code>import turtle</code></li></ul><h2 id="turtle的绘图窗体"><a href="#turtle的绘图窗体" class="headerlink" title="turtle的绘图窗体"></a>turtle的绘图窗体</h2><p>首次通过调用turtle绘图库的方法进行绘图时，会默认打开一个绘图窗体，缺省是居中占整个屏幕的一半。也可以通过<code>turtle.setup()</code>    进行窗体属性的设置。</p><p>用法： <code>turtle.setup(width,height,startx,starty)</code></p><p><img src="/images/image-20210121121417428.png" alt="窗体相对屏幕位置"></p><h2 id="turtle空间坐标体系"><a href="#turtle空间坐标体系" class="headerlink" title="turtle空间坐标体系"></a>turtle空间坐标体系</h2><p>画布初始化后，海龟处于画布的中心点坐标（0，0）且面向坐标轴x轴正方向为当前方向。</p><ul><li>以坐标轴为参考时，可以控制海龟以绝对坐标在画布上运动。</li></ul><center><img src="/images/image-20210121122845723.png" title="" width="380" hight="200"><img src="/images/image-20210121122930485.png" title="" width="380" hight="200"></center><ul><li>以海龟自身为参考时，可以控制海龟往前、后、左、右进行方向运动。</li></ul><center>  <img src ="/images/image-20210121133437046.png" title="" width="380" hight="200"><img src="/images/image-20210121133512314.png" title="" width="380" hight="200"></center><h2 id="turtle角度坐标体系"><a href="#turtle角度坐标体系" class="headerlink" title="turtle角度坐标体系"></a>turtle角度坐标体系</h2><p>在进行turtle绘图时，还可以通过对海龟面向的角度进行控制，进而改变海龟的行进路线。</p><ul><li>以坐标轴为参考时，可以控制海龟以绝对角度进行变向，一般通过<code>turtle.seth(绝对角度值)</code>方法来设定。</li></ul><p><img src="/images/image-20210121135138521.png" alt="控制绝对角度"></p><ul><li><p>以海龟自身为参考时，可以通过控制海龟按目前面向方向为参考的左转或者右转相对角度值来改变行进方向，一般通过<code>turtle.left(相对角度)</code>和<code>turtle.right(相对角度)</code>方法来设定。</p><p><img src="/images/image-20210121135717987.png" alt="控制相对角度"></p></li></ul><h2 id="常用绘图命令"><a href="#常用绘图命令" class="headerlink" title="常用绘图命令"></a>常用绘图命令</h2><h3 id="画笔设置"><a href="#画笔设置" class="headerlink" title="画笔设置"></a>画笔设置</h3><p>画笔有颜色、画线的宽度等属性：</p><ul><li><code>turtle.pensize()</code>：设置画笔的宽度；</li><li><code>turtle.pencolor()</code>：没有参数传入返回当前画笔颜色。传入参数设置画笔颜色，可以是字符串如”red”、”blue”，也可以是RGB 3元组。</li><li><code>turtle.speed()</code>：设置画笔移动速度，画笔绘制的速度范围[0,10]整数，数字越大越快。</li></ul><h3 id="绘图命令"><a href="#绘图命令" class="headerlink" title="绘图命令"></a>绘图命令</h3><p>操纵海龟绘图有多种命令，这些命令可以分为三种，分别是：画笔运动命令、画笔控制命令和全局控制命令。</p><h5 id="画笔运动命令"><a href="#画笔运动命令" class="headerlink" title="画笔运动命令"></a>画笔运动命令</h5><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>turtle.forward(distance)</td><td>向当前画笔方向移动distance像素长</td></tr><tr><td>turtle.backward(distance)</td><td>向当前画笔相反方向移动distance像素长度</td></tr><tr><td>turtle.right(degree)</td><td>顺时针移动degree°</td></tr><tr><td>turtle.left(degree)</td><td>逆时针移动degree°</td></tr><tr><td>turtle.pendown()</td><td>移动时绘制图形,缺省时也为绘制</td></tr><tr><td>turtle.goto(x,y)</td><td>将画笔移动到坐标为x，y的位置</td></tr><tr><td>turtle.penup()</td><td>移动时不绘制图形,提起笔，用于另起一个地方绘制时用</td></tr><tr><td>turtle.speed(speed)</td><td>画笔绘制的速度范围[0,10]整数</td></tr><tr><td>turtle.circle()</td><td>画圆,半径为正(负),表示圆心在画笔的左边(右边)画圆</td></tr></tbody></table><h5 id="画笔控制命令"><a href="#画笔控制命令" class="headerlink" title="画笔控制命令"></a>画笔控制命令</h5><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>turtle.pensize(width)</td><td>绘制图形时的宽度</td></tr><tr><td>turtle.pencolor()</td><td>画笔颜色</td></tr><tr><td>turtle.fillcolor(colorstring)</td><td>绘制图形的填充颜色</td></tr><tr><td>turtle.color(color1, color2)</td><td>同时设置pencolor=color1, fillcolor=color2</td></tr><tr><td>turtle.filling()</td><td>返回当前是否在填充状态</td></tr><tr><td>turtle.begin_fill()</td><td>准备开始填充图形</td></tr><tr><td>turtle.end_fill()</td><td>填充完成</td></tr><tr><td>turtle.hideturtle()</td><td>隐藏箭头显示；</td></tr><tr><td>turtle.showturtle()</td><td>与hideturtle()函数对应</td></tr></tbody></table><h5 id="全局控制命令"><a href="#全局控制命令" class="headerlink" title="全局控制命令"></a>全局控制命令</h5><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>turtle.clear()</td><td>清空turtle窗口，但是turtle的位置和状态不会改变</td></tr><tr><td>turtle.reset()</td><td>清空窗口，重置turtle状态为起始状态</td></tr><tr><td>turtle.undo()</td><td>撤销上一个turtle动作</td></tr><tr><td>turtle.isvisible()</td><td>返回当前turtle是否可见</td></tr><tr><td>stamp()</td><td>复制当前图形</td></tr><tr><td>turtle.write(s[,font=(“font-name”,font_size,”font_type”)])</td><td>写文本，s为文本内容，font是字体的参数，里面分别为字体名称，大小和类型；font为可选项, font的参数也是可选项</td></tr></tbody></table><h3 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h3><p><strong>绘制一个五角星</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> turtle <span class="hljs-keyword">as</span> t          <span class="hljs-comment"># 导入 turtle 库 别名 t</span><br>t.setup(<span class="hljs-number">600</span>, <span class="hljs-number">500</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>)<span class="hljs-comment"># 设置窗口宽600，高500，起始位置在屏幕200，200坐标处</span><br>t.pensize(<span class="hljs-number">3</span>)<span class="hljs-comment"># 设置画笔粗细为3</span><br>t.pencolor(<span class="hljs-string">&quot;pink&quot;</span>)<span class="hljs-comment"># 设置画笔颜色为pink</span><br>t.fillcolor(<span class="hljs-string">&quot;red&quot;</span>)<span class="hljs-comment"># 设置填充色为red</span><br>t.penup()<span class="hljs-comment"># 抬起画笔</span><br>t.goto(-<span class="hljs-number">150</span>,<span class="hljs-number">80</span>)<span class="hljs-comment"># 移动画笔到窗口绝对坐标（-150，80）处</span><br>t.pendown()<span class="hljs-comment"># 落下画笔</span><br>t.begin_fill()<span class="hljs-comment"># 开始填充</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<span class="hljs-comment"># 循环5次（i从0-4）</span><br>    t.forward(<span class="hljs-number">300</span>)<span class="hljs-comment"># 向前行进300像素</span><br>    t.right(<span class="hljs-number">144</span>)<span class="hljs-comment"># 以海龟行前方向为参考，右转144度</span><br>t.end_fill()<span class="hljs-comment"># 循环结束，停止填充</span><br>t.done()<span class="hljs-comment"># 让窗口进入消息循环，等待被关闭</span><br></code></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><img src="/images/image-20210121142516720.png" alt="五角星绘制实例"></p><h3 id="附：一个非常好看的樱花树的绘制"><a href="#附：一个非常好看的樱花树的绘制" class="headerlink" title="附：一个非常好看的樱花树的绘制"></a>附：一个非常好看的樱花树的绘制</h3><p>链接：<a href="https://blog.csdn.net/z564359805/article/details/85861481#commentBox">https://blog.csdn.net/z564359805/article/details/85861481#commentBox</a></p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="http://blog.itpub.net/69908432/viewspace-2659461/">http://blog.itpub.net/69908432/viewspace-2659461/</a></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>程序设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown速查表</title>
    <link href="/2021/01/20/markdown%E9%80%9F%E6%9F%A5%E8%A1%A8/"/>
    <url>/2021/01/20/markdown%E9%80%9F%E6%9F%A5%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown-速查表"><a href="#Markdown-速查表" class="headerlink" title="Markdown 速查表"></a>Markdown 速查表</h1><p>Markdown 语法快速参考手册 / 速查表。</p><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>此 Markdown 速查表提供了所有 Markdown 语法元素的快速参考。但是此速查表无法涵盖所有极限用法，因此，如果您需要某些语法元素的详细信息，请参阅我们的 <a href="https://www.markdown.xyz/basic-syntax">基本语法</a> 和 <a href="https://www.markdown.xyz/extended-syntax">扩展语法</a> 手册。</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>这些是 John Gruber 的原始设计文档中列出的元素。所有 Markdown 应用程序都支持这些元素。</p><table><thead><tr><th>元素</th><th>Markdown 语法</th></tr></thead><tbody><tr><td><a href="https://www.markdown.xyz/basic-syntax/#headings">标题（Heading）</a></td><td># H1<br/>## H2<br/>### H3</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#bold">粗体（Bold）</a></td><td>**bold text**</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#italic">斜体（Italic）</a></td><td>*italicized text*</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#blockquotes-1">引用块（Blockquote）</a></td><td>&gt; blockquote</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#ordered-lists">有序列表（Ordered List）</a></td><td>1. First item<br/>2. Second item<br/>3. Third item</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#unordered-lists">无序列表（Unordered List）</a></td><td>- First item<br/>- Second item<br/>- Third item</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#code">代码（Code）</a></td><td>`code`</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#horizontal-rules">分隔线（Horizontal Rule）</a></td><td>---</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#links">链接（Link）</a></td><td>[title](<a href="https://www.example.com/">https://www.example.com\</a>)</td></tr><tr><td><a href="https://www.markdown.xyz/basic-syntax/#images">图片（Image）</a></td><td>![alt text](image.jpg)</td></tr></tbody></table><h2 id="扩展语法"><a href="#扩展语法" class="headerlink" title="扩展语法"></a>扩展语法</h2><p>这些元素通过添加额外的功能扩展了基本语法。但是，并非所有 Markdown 应用程序都支持这些元素。</p><table><thead><tr><th>元素</th><th>Markdown 语法</th></tr></thead><tbody><tr><td><a href="https://www.markdown.xyz/extended-syntax/#tables">表格（Table）</a></td><td>| Syntax | Description |<br/>| ———– | ———– |<br/>| Header | Title |<br/>| Paragraph | Text |</td></tr><tr><td><a href="https://www.markdown.xyz/extended-syntax/#fenced-code-blocks">代码块（Fenced Code Block）</a></td><td>```<br/>{ <br/>“firstName”: “John”, <br/>“lastName”: “Smith”, <br/>“age”: 25<br/>}<br/>```</td></tr><tr><td><a href="https://www.markdown.xyz/extended-syntax/#footnotes">脚注（Footnote）</a></td><td>Here’s a sentence with a footnote. [^1]<br/>[^1]: This is the footnote.</td></tr><tr><td><a href="https://www.markdown.xyz/extended-syntax/#heading-ids">标题编号（Heading ID）</a></td><td>### My Great Heading { #custom-id }</td></tr><tr><td><a href="https://www.markdown.xyz/extended-syntax/#definition-lists">定义列表（Definition List）</a></td><td>term: <br/>efinition</td></tr><tr><td><a href="https://www.markdown.xyz/extended-syntax/#strikethrough">删除线（Strikethrough）</a></td><td>~~The world is flat.~~</td></tr><tr><td><a href="https://www.markdown.xyz/extended-syntax/#task-lists">任务列表（Task List）</a></td><td>- [x] Write the press release<br/>- [ ] Update the website<br/>- [ ] Contact the media</td></tr></tbody></table><h2 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h2><p><a href="https://www.markdown.xyz/cheat-sheet/">Markdown 速查表</a></p>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序设计</tag>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python学习笔记-Mac环境配置</title>
    <link href="/2021/01/19/python-study-1/"/>
    <url>/2021/01/19/python-study-1/</url>
    
    <content type="html"><![CDATA[<h1 id="Python开发环境配置"><a href="#Python开发环境配置" class="headerlink" title="Python开发环境配置"></a>Python开发环境配置</h1><h2 id="Python语言概述"><a href="#Python语言概述" class="headerlink" title="Python语言概述"></a>Python语言概述</h2><ul><li>Python  /ˈpaiθən/ ，译为“蟒蛇”</li><li>Python语言拥有者是Python Software Foundation（PSF）<ul><li>PSF是非盈利组织，致力于保护Python语言开放、开源和发展</li></ul></li><li>Python语言创立者：Guido van Rossum<ul><li>2002年，Python 2.x</li><li>2008年，Python 3.x</li></ul></li><li>Python语言是一种解释型语言，是一个有开放、开源精神的编程语言</li><li>Python语言可应用于火星探测、搜索引擎、引力波分析等众多领域，是一种超级语言</li></ul><h2 id="Python基本开发环境IDLE介绍"><a href="#Python基本开发环境IDLE介绍" class="headerlink" title="Python基本开发环境IDLE介绍"></a>Python基本开发环境IDLE介绍</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>官方提供，包括Python解释器和IDLE开发环境</li><li>轻量：大小只有几十MB，安装使用灵活，初学者推荐使用</li><li>功能丰富：编辑器+交互环境+标准库+库安装工具等等</li></ul><h3 id="安装过程（mac环境）"><a href="#安装过程（mac环境）" class="headerlink" title="安装过程（mac环境）"></a>安装过程（mac环境）</h3><p>​    Windows和Linux平台安装方法建议参考官方安装文档：<a href="https://docs.python.org/zh-cn/3.9/using/index.html">https://docs.python.org/zh-cn/3.9/using/index.html</a>  </p><p>​    Mac平台自带2.x版本，建议同时安装3.x版本学习，2.x版本已经不再更新，安装过程如下：</p><ul><li>进入官方主页：<a href="https://www.python.org/">https://www.python.org/</a> 下载最新版本，我选的3.9.1</li></ul><img src="/images/image-20210119211354215.png" alt="image-20210119211354215" style="zoom:77%;" /><ul><li>双击安装包进行安装，一路继续即可</li></ul><img src="/images/image-20210119211257130.png" alt="image-20210119211257130" style="zoom:87%;" /><ul><li><p>安装成功后在访达-应用程序下会创建Python 3.9文件夹，里面包含了IDLE开发环境以及帮助文档  </p><img src="/images/image-20210119212700271.png" alt="image-20210119212700271" style="zoom:90%;" /></li><li><p>设置PATH变量,我用的是zsh,使用vim打开.zshrc文件</p><p><code>vim ~/.zshrc</code></p><p>增加如下文本：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># Setting PATH for Python 3.9</span><br><span class="hljs-comment"># The original version is saved in .bash_profile.pysave</span><br><span class="hljs-attribute">PATH</span>=<span class="hljs-string">&quot;/Library/Frameworks/Python.framework/Versions/3.9/bin:<span class="hljs-variable">$&#123;PATH&#125;</span>&quot;</span><br><span class="hljs-builtin-name">export</span> PATH<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-string">&quot;/usr/local/opt/python@3.9/bin:<span class="hljs-variable">$PATH</span>&quot;</span><br>alias <span class="hljs-attribute">python</span>=<span class="hljs-string">&quot;/Library/Frameworks/Python.framework/Versions/3.9/bin/python3.9&quot;</span><br>alias <span class="hljs-attribute">pip</span>=<span class="hljs-string">&quot;/Library/Frameworks/Python.framework/Versions/3.9/bin/pip3.9&quot;</span><br></code></pre></td></tr></table></figure><p>重新载入shell程序</p><p><code>source ~/.zshrc</code></p><p>测试是否成功</p><p><code>python -V</code></p><blockquote><p>kikumail in ~ λ python -V<br>Python 3.9.1</p></blockquote></li></ul><h2 id="Python程序编写与运行"><a href="#Python程序编写与运行" class="headerlink" title="Python程序编写与运行"></a>Python程序编写与运行</h2><p>​    Python有二种编程方式</p><blockquote><p>实例1 求圆面积，设计一程序，在控制台输入一个半径值，输出圆的面积。  </p><p>圆面积计算公式：面积 = PI * 半径<sup>2</sup></p></blockquote><ul><li><strong>交互式</strong>    对每个输入语句即时运行出结果，适合语法练习使用。打开shell，输入python或者打开IDLE。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">kikumail <span class="hljs-keyword">in</span> ~/blog on master ● ● λ python<br>Python <span class="hljs-number">3.9</span><span class="hljs-number">.1</span> (v3<span class="hljs-number">.9</span><span class="hljs-number">.1</span>:1e5d33e9b9, Dec  <span class="hljs-number">7</span> <span class="hljs-number">2020</span>, <span class="hljs-number">12</span>:<span class="hljs-number">44</span>:01)<br>[Clang <span class="hljs-number">12.0</span><span class="hljs-number">.0</span> (clang-<span class="hljs-number">1200.0</span><span class="hljs-number">.32</span><span class="hljs-number">.27</span>)] on darwin<br>Type <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.<br><span class="hljs-meta">&gt;&gt;&gt; </span>r = <span class="hljs-number">30</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>circleArea = <span class="hljs-number">3.14</span> * r * r<br><span class="hljs-meta">&gt;&gt;&gt; </span>print(circleArea)<br><span class="hljs-number">2826.0</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>print(<span class="hljs-string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="hljs-built_in">format</span>(circleArea))<br><span class="hljs-number">2826.00</span><br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure><ul><li><p><strong>文件式</strong>：批量执行一组语句并运行出结果，Python的主要编方式。打开IDLE，新建CircleArea.py文件。</p><p><img src="/images/image-20210119222012994.png" alt="image-20210119222012994"></p><p>打开shell，输入python CircleArea.py运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">kikumail <span class="hljs-keyword">in</span> ~/Documents/python on master ● λ python CircleArea.py<br>2826.0<br>2826.00<br>kikumail <span class="hljs-keyword">in</span> ~/Documents/python on master ● λ<br></code></pre></td></tr></table></figure></li></ul><h2 id="Python高级开发环境VSCode"><a href="#Python高级开发环境VSCode" class="headerlink" title="Python高级开发环境VSCode"></a>Python高级开发环境VSCode</h2><p>下载地址：<a href="http://code.visualstudio.com/">http://code.visualstudio.com</a>    直接下载安装即可</p><ul><li>功能完善，扩展模块多，非常推荐使用！</li></ul>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>程序设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你好，朋友</title>
    <link href="/2021/01/19/hello-world/"/>
    <url>/2021/01/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>欢迎光临！没了～</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
